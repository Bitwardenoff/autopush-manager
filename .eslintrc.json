{
  "root": true,
  "env": {
    "browser": true,
    "webextensions": true
  },
  "overrides": [
    {
      "files": [
        "*.ts",
        "*.js"
      ],
      "excludedFiles": [
        "test*.setup.ts",
        "test.environment.ts"
      ],
      "plugins": [
        "@typescript-eslint",
        "import"
      ],
      "parser": "@typescript-eslint/parser",
      "parserOptions": {
        "project": [
          "./tsconfig.eslint.json"
        ],
        "sourceType": "module",
        "ecmaVersion": 2020
      },
      "extends": [
        "eslint:recommended",
        "plugin:@typescript-eslint/strict",
        "plugin:import/recommended",
        "plugin:import/typescript",
        "prettier"
      ],
      "rules": {
        "@typescript-eslint/explicit-member-accessibility": [
          "error",
          {
            "accessibility": "no-public"
          }
        ],
        "@typescript-eslint/no-explicit-any": "error",
        "@typescript-eslint/no-floating-promises": "error",
        "@typescript-eslint/no-misused-promises": [
          "error",
          {
            "checksVoidReturn": false
          }
        ],
        "@typescript-eslint/no-this-alias": [
          "error",
          {
            "allowedNames": [
              "self"
            ]
          }
        ],
        "@typescript-eslint/no-unused-vars": [
          "error",
          {
            "args": "none"
          }
        ],
        "no-console": "error",
        "import/no-unresolved": "error",
        "import/order": [
          "error",
          {
            "alphabetize": {
              "order": "asc"
            },
            "newlines-between": "always",
            "pathGroups": [
              {
                "pattern": "@bitwarden/**",
                "group": "external",
                "position": "after"
              },
              {
                "pattern": "src/**/*",
                "group": "parent",
                "position": "before"
              }
            ],
            "pathGroupsExcludedImportTypes": [
              "builtin"
            ]
          }
        ],
        "no-restricted-syntax": [
          "error",
          {
            "message": "Calling `svgIcon` directly is not allowed",
            "selector": "CallExpression[callee.name='svgIcon']"
          },
          {
            "message": "Accessing FormGroup using `get` is not allowed, use `.value` instead",
            "selector": "ChainExpression[expression.object.callee.property.name='get'][expression.property.name='value']"
          }
        ],
        "curly": [
          "error",
          "all"
        ],
        "import/namespace": [
          "off"
        ] // This doesn't resolve namespace imports correctly, but TS will throw for this anyway
      }
    }
  ]
}
